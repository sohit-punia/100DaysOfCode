Given the head of a singly linked list, return true if it is a palindrome or false otherwise.

Answer:-

ListNode* reverseList(ListNode* head) {
    ListNode* prev = NULL;
    while (head) {
        ListNode* nextNode = head->next;
        head->next = prev;
        prev = head;
        head = nextNode;
    }
    return prev;
}


    bool isPalindrome(ListNode* head) {
        if (!head || !head->next) 
        return true;
      
       ListNode* slow = head;
       ListNode* fast = head;

        while (fast && fast->next) {
        slow = slow->next;
        fast = fast->next->next;
        }
        //reverse 2nd half
        ListNode* secondHalf = reverseList(slow);

        ListNode* firstHalf = head;
        ListNode* copySecondHalf = secondHalf;

          while (secondHalf) {
         if (firstHalf->val != secondHalf->val)
            return false;

         firstHalf = firstHalf->next;
         secondHalf = secondHalf->next;
        }
        return true;
    }
