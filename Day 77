Given two integer arrays inorder and postorder where inorder is the inorder traversal of a binary tree and postorder is the postorder traversal of the same tree, construct and return the binary tree.

class Solution {
   unordered_map<int,int> inMap; 

    TreeNode* buildTree(vector<int>& inorder , int is , int ie , vector<int>& postorder, int ps , int pe , unordered_map<int,int> &inMap ){
        if(ps > pe || is > ie) return NULL;
        TreeNode* root = new TreeNode(postorder[pe]);

        int inroot = inMap.at(root -> val);
        int numLeft = inroot - is;

        root->left = buildTree(inorder , is , inroot - 1 , postorder ,ps , ps + numLeft - 1, inMap);

        root->right = buildTree(inorder , inroot + 1 , ie , postorder , ps + numLeft , pe -1, inMap);        

        return root;
    }
public:

    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        if(inorder.size() != postorder.size()) return NULL;
        inMap.clear();
        for(int i = 0; i < inorder.size(); i++){
            inMap[inorder[i]] = i;
        }

        return buildTree(inorder , 0 , inorder.size() -1 , postorder , 0 , postorder.size() - 1 , inMap);     

    }
};
