Given the head of a linked list, reverse the nodes of the list k at a time, and return the modified list.
k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.
You may not alter the values in the list's nodes, only nodes themselves may be changed.

Answer:- 

  ListNode* reverseKGroup(ListNode* head, int k) {
    if (head == NULL)
     return nullptr;

    ListNode* node = head;
    int count = 0;
    while (node && count < k) {
        node = node->next;
        count++;
    }
    if (count < k) {
        // fewer than k nodes , leave them 
        return head;
    }

    ListNode* prev = nullptr;
    ListNode* curr = head;
    ListNode* next = nullptr;
    for (int i = 0; i < k; i++) {
        next = curr->next;
        curr->next = prev;
        prev = curr;
        curr = next;
    }

    head->next = reverseKGroup(curr, k);

    return prev;
}
