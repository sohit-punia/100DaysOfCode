Given the root of a complete binary tree, return the number of the nodes in the tree.

According to Wikipedia, every level, except possibly the last, is completely filled in a complete binary tree, and all nodes in the last level are as far left as possible. It can have between 1 and 2h nodes inclusive at the last level h.
Design an algorithm that runs in less than O(n) time complexity.

    int countNodes(TreeNode* root) {
        if(root == NULL ) return 0;
        int left_level =1;
        TreeNode* left = root->left;

        while(left){
            left = left->left;
            left_level += 1;
        }
        int right_level =1;
        TreeNode*  right = root->right;
        while(right){
            right = right->right;
            right_level += 1;
        }
        if(left_level == right_level){
            return pow(2 , left_level) - 1;
        }
        return 1 + countNodes(root ->left) + countNodes(root -> right); 
        
    }
