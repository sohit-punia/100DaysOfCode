Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.

If target is not found in the array, return [-1, -1].
You must write an algorithm with O(log n) runtime complexity.

Answer:-

   int findFirst(const vector<int>& nums, int target) {
        int low = 0, high = nums.size() - 1;
        int result = -1;
        while(low <= high ){
            int mid = low + (high - low) / 2;
            if (nums[mid] == target) {
                result =  mid;
                high = mid-1;
            }
            else if (nums[mid] < target) {
                low = mid + 1;
            }
            else{
                high = mid - 1;
            }
        }
        return result;
    }
    int findLast(const vector<int>& nums, int target) {
        int low = 0, high = nums.size() - 1;
        int result = -1;
        while(low <= high ){
            int mid = low + (high - low) / 2;
            if (nums[mid] == target) {
                result = mid;
                low = mid + 1;
            }
            else if (nums[mid] < target) {
                low = mid + 1;
            }
            else{
                high = mid - 1;
            }
        }
        return result;

    }
    vector<int> searchRange(vector<int>& nums, int target) {
        int first = findFirst(nums, target);
        if (first == -1) {
        return { -1, -1 };
        }
        int last = findLast(nums, target);
         return { first, last };
    }
