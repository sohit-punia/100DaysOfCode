Given an array nums of n integers, return an array of all the unique quadruplets [nums[a], nums[b], nums[c], nums[d]] 

Answer:-
vector<vector<int>> fourSum(vector<int>& nums, int target) {
    vector<vector<int>> result;
    sort(nums.begin() , nums.end());
    int size = nums.size();

    if(size <4){
        return result;
    }
    for(int i = 0; i<size - 3; i++){
        if( i>0 &&nums[i] == nums[i-1]) continue;

        for(int j = i + 1;j< size-2 ; j++){
            if( j > i+1 && nums[j] == nums[j-1]) continue;

              int c = j + 1;
               int d = size - 1;
               while(c < d){
                long long sum = (long long)nums[i] + nums[j] + nums[c] + nums[d];
                if(sum == target){
                    result.push_back({nums[i] , nums[j] , nums[c] , nums[d]});
                 while (c < d && nums[c]  == nums[c + 1])  ++c;
                 while(c < d && nums[d] == nums[d - 1]) --d;

                 c++;
                 d--;
                }
                else if(sum < target){
                    c++;
                }
                else{
                    d--;
                } 
              }
        }
    }
    return result;
}
