Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.
Notice that the solution set must not contain duplicate triplets.

Answer:-

vector<vector<int>> threeSum(vector<int>& nums) {
    vector<vector<int>> result;
    int size = nums.size();
    sort(nums.begin(), nums.end());

    for (int i = 0; i < size - 2; ++i) {
        if (i > 0 && nums[i] == nums[i - 1]) continue;

        int left = i + 1;
        int right = size - 1;

        while (left < right) {
            int sum = nums[i] + nums[left] + nums[right];

            if (sum == 0) {
                vector<int> triplet = {nums[i], nums[left], nums[right]};
                result.push_back(triplet);

                while (left < right && nums[left] == nums[left + 1])
                 left++;
                while (left < right && nums[right] == nums[right - 1]) 
                 right--;

                left++;
                right--;
            }
            else if (sum < 0) {
                left++;
            }
            else {
                right--;
            }
        }
    }

    return result;
}
