Given the root of a binary tree and an integer targetSum, return all root-to-leaf paths where the sum of the node values in the path equals targetSum. Each path should be returned as a list of the node values, not node references.

A root-to-leaf path is a path starting from the root and ending at any leaf node. A leaf is a node with no children

class Solution {
    vector<vector<int>> ans;
    void find(TreeNode* root , int targetSum , int sum ,vector<int> v){
        if(root == NULL) return ;

        if(root -> left == NULL && root->right == NULL){
            if(sum + root->val == targetSum){
                v.push_back(root->val);
                ans.push_back(v);
                v.pop_back();
            }
            return;
        }
        v.push_back(root->val);
        find(root->left , targetSum , sum + root->val ,v);
        find(root->right , targetSum , sum + root->val ,v);
        v.pop_back();
    }
public:
    vector<vector<int>> pathSum(TreeNode* root, int targetSum) {
        ans.clear();
        vector<int> v;
        if(root == NULL) return ans;
        find(root , targetSum , 0 , v);
        return ans;

    }
};
