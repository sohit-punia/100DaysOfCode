Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.

Answer:-

    vector<vector<int>> merge(vector<vector<int>>& intervals) {

        sort(intervals.begin() , intervals.end());
        int n = intervals.size();
        vector<vector<int>> ans;

        for(int i =0; i<n; i++){
            if(ans.empty()) ans.push_back(intervals[i]);
            else{
                vector<int> &v = ans.back(); // last interval in ans 
                int y = v[1]; // end point of interval 
                //compare with current interval :- i 
                // start <= end 
                if(intervals[i][0] <= y) {
                    v[1] = max(y , intervals[i][1]);
                }
                // if start !<= end  or not overlapping 
                else{
                    ans.push_back(intervals[i]);
                }

            }
        }
        return ans;
    }
